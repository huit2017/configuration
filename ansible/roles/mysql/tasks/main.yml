---
# file: roles/mysql/tasks/main.yml

- name: add Mysql repo
  yum: name=https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm state=present

- name: install mysql
  yum: name={{item}} state=latest
  with_items:
    - libselinux-python
    - MySQL-python
    - mysql-community-server

- name: create /etc/my.cnf
  template: src=etc/my.cnf.j2 dest=/etc/my.cnf owner=root mode=0644

- name: create /etc/my.cnf.d/master.cnf - master
  template: src=etc/my.cnf.d/master.cnf.j2 dest=/etc/my.cnf.d/master.cnf owner=root mode=0644
  when: ansible_hostname=='dbm'

- name: start mysql and enabled
  service: name=mysqld state=started enabled=yes

- name: check exist /root/.my.cnf
  stat: path=/root/.my.cnf
  register: root_my_cnf

- name: get temporary root password
  shell: grep "temporary password" /var/log/mysqld.log | awk '{print $11}'
  register: temporary_password
  when: not root_my_cnf.stat.exists

- name: set root password length
  shell: mysql -u root -p'{{ temporary_password.stdout }}' --connect-expired-password -e "SET GLOBAL validate_password_length=4;"
  when: not root_my_cnf.stat.exists

- name: set root password policy
  shell: mysql -u root -p'{{ temporary_password.stdout }}' --connect-expired-password -e "SET GLOBAL validate_password_policy=LOW;"
  when: not root_my_cnf.stat.exists

- name: change root password
  shell: mysql -u root -p'{{ temporary_password.stdout }}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ root_password }}';"
  when: not root_my_cnf.stat.exists

- name: create /root/.my.cnf
  template: src=root/.my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600
  when: not root_my_cnf.stat.exists

- name: create database
  mysql_db: name={{ db_name }} state=present encoding=utf8mb4

- name: create user
  mysql_user: name={{ db_user }} password={{ db_password }} priv="{{ db_name }}.*:ALL,GRANT" state=present

- name: end_play
  meta: end_play
  when: ansible_hostname=='local'

- name: create user replication - master
  mysql_user: name={{ repl_user }} password={{ repl_password }} priv="*.*:REPLICATION SLAVE" host=192.168.36.14 state=present
  when: ansible_hostname=='dbm'

- name: stop slave thread
  mysql_replication: mode=stopslave
  when: not ansible_hostname=='dbm'

- name: Get master binlog file name and binlog position
  mysql_replication: mode=getmaster
  delegate_to: "{{ groups['db-m'][0] }}"
  register: master_status
  when: not ansible_hostname=='dbm'

- name: change master to for replication - slave
  mysql_replication: mode=changemaster master_host="{{ groups['db-m'][0] }}" master_log_file={{ master_status.File }} master_log_pos={{ master_status.Position }} master_user={{ repl_user }} master_password={{ repl_password }}
  when: not ansible_hostname=='dbm'

- name: start slave thread
  mysql_replication: mode=startslave
  when: not ansible_hostname=='dbm'

- name: Check slave status using port 3308
  mysql_replication: mode=getslave login_host=localhost login_port=3306
  register: slave_status
  when: not ansible_hostname=='dbm'

- name: debug slave_status
  debug: msg="{{ slave_status }}"
  when: not ansible_hostname=='dbm'
